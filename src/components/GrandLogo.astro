---
// Component GrandLogo

import Logo from '../assets/logo.svg'
import Emblem from '../assets/emblem.svg'

interface Props {
  title: string
  emblem?: boolean
  dark?: boolean
  glare?: boolean
}

const { title, glare = true, emblem = false, dark = false } = Astro.props
const description = 'Gelato Glace Emblem with subtle glare animation'
---

<!-- Emblem -->{
  emblem && (
    <div class="relative overflow-hidden flex h-fit w-fit">
      <Emblem
        width={287 / 2.5}
        height={30 / 2.5}
      />

      <div class="bling bling-animation" />
    </div>
  )
}

<!-- LogoType :: Dark/Light -->
<div class="mt-4 relative overflow-clip">
  <Logo
    class:list={[dark && 'fill-white', !dark && 'fill-black']}
    width={210}
    height={85}
  />
</div>

<style>
  @keyframes bling {
    0% {
      transform: translateX(-100%);
      opacity: 0;
    }
    20% {
      opacity: 0.5;
    }
    80% {
      opacity: 0.5;
    }
    100% {
      transform: translateX(200%);
      opacity: 0;
    }
  }

  .bling {
    position: absolute;
    top: 0;
    left: 0;
    width: 50px;
    height: 100%;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(255, 255, 255, 0.9),
      transparent
    );
    transform: skewX(-20deg);
    opacity: 0;
    pointer-events: none;
  }

  .bling-animation {
    animation: bling 1s ease-in-out;
  }
</style>

<script>
  const blingElements = document.querySelectorAll('.bling')

  const getRandomDelay = () => {
    // Random delay between 4000ms (4s) and 10000ms (10s)
    return Math.random() * (10000 - 4000) + 4000
  }

  const triggerBling = (bling: HTMLElement) => {
    if (bling.classList.contains('bling-animation')) {
      return
    }

    bling.classList.remove('bling-animation')
    void bling.offsetWidth
    bling.classList.add('bling-animation')

    // Schedule next bling with random delay
    setTimeout(() => triggerBling(bling), getRandomDelay())
  }

  blingElements.forEach((bling) => {
    if (!(bling instanceof HTMLElement)) return

    // Handle animation end
    bling.addEventListener('animationend', () => {
      bling.classList.remove('bling-animation')
    })

    // Start with initial random delay
    setTimeout(() => {
      triggerBling(bling)
    }, getRandomDelay())
  })
</script>
